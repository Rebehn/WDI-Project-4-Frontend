{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/models/chatroom.js","js/controllers/chatrooms.js","js/controllers/main.js","js/controllers/message.js","js/models/messages.js","js/router.js","js/controllers/status.js","js/models/user.js","js/controllers/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","ActionCable","ActionCableConfig","debug","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","Chatroom","$resource","id","update","method","ChatroomsIndexController","hasAccess","chatroom","private","allowed_user_ids","indexOf","getPayload","chatroomsIndex","all","query","ChatroomsNewController","createChatroom","save","chatroomsNew","ChatroomsShowController","User","chatroomsShow","$update","isMyMessage","msg","user_id","isSelf","currentUser","allowUser","push","showOnAllList","showOnInChatList","revokePrivilege","i","splice","show","get","params","filter","username","MainController","$rootScope","secureState","e","toState","toParams","main","burgerOpen","isAuthenticated","protectedStates","includes","name","parseFloat","preventDefault","logout","$on","MessageController","ActionCableChannel","Message","$scope","isOwnMsssage","message","console","log","inputText","isOwnMessage","myData","chat_room_id","consumer","chat","callback","subscribe","sendToMyChannel","messageData","body","send","unsubscribe","undefined","Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","StatusController","ActionCableSocketWrangler","status","UsersIndexController","usersIndex","UsersShowController","isCurrentUser","Number","usersShow","UsersEditController","usersEdit","angular","module","constant","config","run","$inject","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer', 'ngActionCable'])\n  // .constant('API_URL', 'https://limitless-headland-58759.herokuapp.com/api')\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth)\n  .run(ActionCable);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n\nActionCable.$inject = ['ActionCableConfig'];\nfunction ActionCable(ActionCableConfig) {\n  ActionCableConfig.debug = true;\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        $state.go('usersIndex');\n      });\n  }\n\n  login.submit = submit;\n}","angular.module('finalProject')\n  .factory('Chatroom', Chatroom);\n\nChatroom.$inject = ['$resource', 'API_URL'];\nfunction Chatroom($resource, API_URL) {\n  return new $resource(`${API_URL}/chat_rooms/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('ChatroomsIndexController', ChatroomsIndexController)\n  .controller('ChatroomsNewController', ChatroomsNewController)\n  .controller('ChatroomsShowController', ChatroomsShowController);\n\nChatroomsIndexController.$inject = ['Chatroom', '$auth'];\nfunction ChatroomsIndexController(Chatroom, $auth) {\n  const chatroomsIndex = this;\n\n  chatroomsIndex.all = Chatroom.query();\n\n  function hasAccess(chatroom) {\n    return !(chatroom.private && (chatroom.allowed_user_ids.indexOf($auth.getPayload().id) < 0));\n  }\n\n  chatroomsIndex.hasAccess = hasAccess;\n}\n\nChatroomsNewController.$inject = ['Chatroom','$state'];\nfunction ChatroomsNewController(Chatroom, $state) {\n  const chatroomsNew = this;\n\n  chatroomsNew.chatroom = {};\n  function createChatroom() {\n    Chatroom.save(chatroomsNew.chatroom);\n    $state.go('chatrooms');\n  }\n\n  chatroomsNew.submit = createChatroom;\n}\n\nChatroomsShowController.$inject = ['Chatroom', '$state', '$auth', 'User'];\nfunction ChatroomsShowController(Chatroom, $state, $auth, User) {\n  const chatroomsShow = this;\n  chatroomsShow.show = false;\n  chatroomsShow.chatroom = Chatroom.get($state.params);\n\n  function update() {\n    chatroomsShow.chatroom.$update();\n  }\n  chatroomsShow.chatroom = Chatroom.get($state.params);\n  chatroomsShow.update = update;\n\n  function isMyMessage(msg) {\n    return msg.user_id === $auth.getPayload().id;\n  }\n  chatroomsShow.isMyMessage = isMyMessage;\n\n  User.get({ id: $auth.getPayload().id }, (user) => {\n    chatroomsShow.currentUser = user;\n    chatroomsShow.all = User.query();\n  });\n\n  function isSelf(user) {\n    return user.id === chatroomsShow.currentUser.id;\n  }\n\n  chatroomsShow.isSelf = isSelf;\n  chatroomsShow.filter = { username: '' };\n\n  function allowUser(user) {\n    chatroomsShow.chatroom.allowed_user_ids.push(user.id);\n    update();\n  }\n  chatroomsShow.allowUser = allowUser;\n\n  function showOnAllList(user) {\n    return (chatroomsShow.chatroom.allowed_user_ids.indexOf(user.id) < 0);\n  }\n  chatroomsShow.showOnAllList = showOnAllList;\n\n  function showOnInChatList(user) {\n    return !(chatroomsShow.chatroom.allowed_user_ids.indexOf(user.id) < 0 || user.id === $auth.getPayload().id);\n  }\n  chatroomsShow.showOnInChatList = showOnInChatList;\n\n  function revokePrivilege(user) {\n    const i = chatroomsShow.chatroom.allowed_user_ids.indexOf(user.id);\n    chatroomsShow.chatroom.allowed_user_ids.splice(i, 1);\n    update();\n  }\n  chatroomsShow.revokePrivilege = revokePrivilege;\n}\n","angular.module('finalProject')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$rootScope', '$auth', '$state'];\nfunction MainController($rootScope, $auth, $state) {\n  const main = this;\n  const protectedStates = ['usersEdit'];\n\n  function secureState(e, toState, toParams) {\n\n    main.burgerOpen = false;\n    if((!$auth.isAuthenticated() &&\n    protectedStates.includes(toState.name)) ||\n    toState.name === 'usersEdit' && (parseFloat(toParams.id) !== $auth.getPayload().id)) {\n      e.preventDefault();\n      $state.go('login');\n    }\n  }\n\n  function logout() {\n    $auth.logout();\n    $state.go('register');\n  }\n\n  main.logout = logout;\n\n  $rootScope.$on('$stateChangeStart', secureState);\n}\n","angular.module('finalProject')\n  .controller('MessageController', MessageController);\n\nMessageController.$inject = ['ActionCableChannel', 'Message', '$scope', 'User', '$auth', '$state'];\nfunction MessageController(ActionCableChannel, Message, $scope, User, $auth, $state){\n  console.log('Message controller loaded');\n  const msg = this;\n  msg.inputText = '';\n  User.get({ id: $auth.getPayload().id }, (user) => {\n    msg.currentUser = user;\n    // msg.users.all = User.query();\n  });\n\n  function isOwnMsssage(message) {\n    return message.user_id === $auth.getPayload().id;\n  }\n\n  msg.isOwnMessage = isOwnMsssage;\n\n  msg.myData = Message.query({ chat_room_id: $state.params.id });\n  // connect to ActionCable\n  var consumer = new ActionCableChannel('ChatChannel', {user: 42, chat: 37});\n  var callback = function(message) {\n    msg.myData.push(message);\n  };\n  consumer.subscribe(callback).then(function(){\n    msg.sendToMyChannel = function(message){\n      const messageData = { body: message, user_id: $auth.getPayload().id, chat_room_id: $state.params.id };\n      Message.save(messageData);\n      consumer.send(messageData);\n    };\n    $scope.$on('$destroy', function(){\n      consumer.unsubscribe().then(function(){\n        msg.sendToMyChannel = undefined;\n      });\n    });\n  });\n}\n","angular.module('finalProject')\n  .factory('Message', Message);\n\nMessage.$inject = ['$resource', 'API_URL'];\nfunction Message($resource, API_URL) {\n  return new $resource(`${API_URL}/messages/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('usersIndex', {\n      url: '/users',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('usersShow', {\n      url: '/users/:id',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    })\n    .state('usersEdit', {\n      url: '/users/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    })\n    .state('landing', {\n      url: '/',\n      templateUrl: '/templates/landing.html'\n    })\n    .state('chatrooms', {\n      url: '/chatrooms',\n      templateUrl: '/templates/chatroomsIndex.html',\n      controller: 'ChatroomsIndexController as chatroomsIndex'\n    })\n    .state('chatroomsNew', {\n      url: '/chatrooms/new',\n      templateUrl: '/templates/chatroomsNew.html',\n      controller: 'ChatroomsNewController as chatroomsNew'\n    })\n    .state('chatroomsShow', {\n      url: '/chatrooms/:id',\n      templateUrl: '/templates/chatroomsShow.html',\n      controller: 'ChatroomsShowController as chatroomsShow'\n    });\n\n  $urlRouterProvider.otherwise('/');\n}\n","angular.module('finalProject')\n  .controller('StatusController', StatusController);\n\nStatusController.$inject = ['ActionCableSocketWrangler'];\nfunction StatusController(ActionCableSocketWrangler){\n  this.status = ActionCableSocketWrangler;\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}","angular.module('finalProject')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\nUsersIndexController.$inject = ['User', '$auth'];\nfunction UsersIndexController(User, $auth) {\n  const usersIndex = this;\n\n  User.get({ id: $auth.getPayload().id }, (user) => {\n    usersIndex.currentUser = user;\n    usersIndex.all = User.query();\n  });\n  \n  function isSelf(user) {\n    return user.id === usersIndex.currentUser.id;\n  }\n  usersIndex.isSelf = isSelf;\n  usersIndex.filter = { username: '' };\n}\n\nUsersShowController.$inject = ['User', '$state', '$auth'];\nfunction UsersShowController(User, $state, $auth) {\n  const usersShow = this;\n\n  function isCurrentUser() {\n    return $auth.getPayload().id === Number($state.params.id);\n  }\n\n  usersShow.isCurrentUser = isCurrentUser;\n\n  usersShow.user = User.get($state.params);\n}\n\nUsersEditController.$inject = ['User', '$state'];\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n}\n"]}