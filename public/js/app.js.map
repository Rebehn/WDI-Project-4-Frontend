{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/models/chatroom.js","js/controllers/chatrooms.js","js/controllers/main.js","js/controllers/message.js","js/models/messages.js","js/router.js","js/controllers/status.js","js/models/user.js","js/controllers/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","ActionCable","ActionCableConfig","debug","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","id","getPayload","Chatroom","$resource","update","method","ChatroomsIndexController","hasAccess","chatroom","private","allowed_user_ids","indexOf","chatroomsIndex","all","query","ChatroomsNewController","createChatroom","chatroomsNew","save","ChatroomsShowController","User","chatroomsShow","$update","isMyMessage","msg","user_id","isSelf","currentUser","allowUser","push","showOnAllList","showOnInChatList","revokePrivilege","i","splice","show","get","params","filter","username","MainController","$rootScope","secureState","e","toState","toParams","payload","main","burgerOpen","isAuthenticated","protectedStates","includes","name","parseFloat","preventDefault","logout","isLoggedIn","$on","MessageController","ActionCableChannel","Message","$scope","isOwnMsssage","message","console","log","inputText","isOwnMessage","myData","chat_room_id","consumer","chat","callback","subscribe","sendToMyChannel","messageData","body","send","unsubscribe","undefined","Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","StatusController","ActionCableSocketWrangler","status","UsersIndexController","usersIndex","UsersShowController","isCurrentUser","authPayload","Number","remove","usersShow","$remove","UsersEditController","usersEdit","angular","module","constant","config","run","$inject","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer', 'ngActionCable'])\n  // .constant('API_URL', window.location.hostname === 'localhost' ? 'http://locahost:3000/api' : 'https://limitless-headland-58759.herokuapp.com/api')\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth)\n  .run(ActionCable);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n\nActionCable.$inject = ['ActionCableConfig'];\nfunction ActionCable(ActionCableConfig) {\n  ActionCableConfig.debug = true;\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        $state.go('usersShow', { id: $auth.getPayload().id });\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n  .factory('Chatroom', Chatroom);\n\nChatroom.$inject = ['$resource', 'API_URL'];\nfunction Chatroom($resource, API_URL) {\n  return new $resource(`${API_URL}/chat_rooms/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('ChatroomsIndexController', ChatroomsIndexController)\n  .controller('ChatroomsNewController', ChatroomsNewController)\n  .controller('ChatroomsShowController', ChatroomsShowController);\n\nChatroomsIndexController.$inject = ['Chatroom', '$auth'];\nfunction ChatroomsIndexController(Chatroom, $auth) {\n  const chatroomsIndex = this;\n\n  chatroomsIndex.all = Chatroom.query();\n\n  function hasAccess(chatroom) {\n    return !(chatroom.private && (chatroom.allowed_user_ids.indexOf($auth.getPayload().id) < 0));\n  }\n\n  chatroomsIndex.hasAccess = hasAccess;\n}\n\nChatroomsNewController.$inject = ['Chatroom','$state', '$auth'];\nfunction ChatroomsNewController(Chatroom, $state, $auth) {\n  const chatroomsNew = this;\n\n  chatroomsNew.chatroom = {};\n  function createChatroom() {\n    chatroomsNew.chatroom.allowed_user_ids = [$auth.getPayload().id];\n    Chatroom.save(chatroomsNew.chatroom);\n    $state.go('chatrooms');\n  }\n\n  chatroomsNew.submit = createChatroom;\n}\n\nChatroomsShowController.$inject = ['Chatroom', '$state', '$auth', 'User'];\nfunction ChatroomsShowController(Chatroom, $state, $auth, User) {\n  const chatroomsShow = this;\n  chatroomsShow.show = false;\n  chatroomsShow.chatroom = Chatroom.get($state.params);\n\n  function update() {\n    chatroomsShow.chatroom.$update();\n  }\n  chatroomsShow.chatroom = Chatroom.get($state.params);\n  chatroomsShow.update = update;\n\n  function isMyMessage(msg) {\n    return msg.user_id === $auth.getPayload().id;\n  }\n  chatroomsShow.isMyMessage = isMyMessage;\n\n  User.get({ id: $auth.getPayload().id }, (user) => {\n    chatroomsShow.currentUser = user;\n    chatroomsShow.all = User.query();\n  });\n\n  function isSelf(user) {\n    return user.id === chatroomsShow.currentUser.id;\n  }\n\n  chatroomsShow.isSelf = isSelf;\n  chatroomsShow.filter = { username: '' };\n\n  function allowUser(user) {\n    chatroomsShow.chatroom.allowed_user_ids.push(user.id);\n    update();\n  }\n  chatroomsShow.allowUser = allowUser;\n\n  function showOnAllList(user) {\n    return (chatroomsShow.chatroom.allowed_user_ids.indexOf(user.id) < 0);\n  }\n  chatroomsShow.showOnAllList = showOnAllList;\n\n  function showOnInChatList(user) {\n    return !(chatroomsShow.chatroom.allowed_user_ids.indexOf(user.id) < 0 || user.id === $auth.getPayload().id);\n  }\n  chatroomsShow.showOnInChatList = showOnInChatList;\n\n  function revokePrivilege(user) {\n    const i = chatroomsShow.chatroom.allowed_user_ids.indexOf(user.id);\n    chatroomsShow.chatroom.allowed_user_ids.splice(i, 1);\n    update();\n  }\n  chatroomsShow.revokePrivilege = revokePrivilege;\n}\n","angular.module('finalProject')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$rootScope', '$auth', '$state', 'User'];\nfunction MainController($rootScope, $auth, $state, User) {\n  const main = this;\n  const protectedStates = ['usersEdit', 'usersIndex', 'usersShow', 'chatroomsIndex', 'chatroomsNew', 'chatrooms'];\n\n  function secureState(e, toState, toParams) {\n    const payload = $auth.getPayload();\n    main.burgerOpen = false;\n    if (payload) {\n      main.currentUser = User.get({ id: payload.id });\n    }\n\n    if((!$auth.isAuthenticated() &&\n    protectedStates.includes(toState.name)) ||\n    toState.name === 'usersEdit' && (parseFloat(toParams.id) !== $auth.getPayload().id)) {\n      e.preventDefault();\n      $state.go('login');\n    }\n  }\n\n  function logout() {\n    $auth.logout();\n    $state.go('landing');\n  }\n  main.logout = logout;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n\n  $rootScope.$on('$stateChangeStart', secureState);\n}\n","angular.module('finalProject')\n  .controller('MessageController', MessageController);\n\nMessageController.$inject = ['ActionCableChannel', 'Message', '$scope', 'User', '$auth', '$state'];\nfunction MessageController(ActionCableChannel, Message, $scope, User, $auth, $state){\n  console.log('Message controller loaded');\n  const msg = this;\n  msg.inputText = '';\n  User.get({ id: $auth.getPayload().id }, (user) => {\n    msg.currentUser = user;\n    // msg.users.all = User.query();\n  });\n\n  function isOwnMsssage(message) {\n    return message.user_id === $auth.getPayload().id;\n  }\n\n  msg.isOwnMessage = isOwnMsssage;\n\n  msg.myData = Message.query({ chat_room_id: $state.params.id });\n  // connect to ActionCable\n  var consumer = new ActionCableChannel('ChatChannel', {user: 42, chat: 37});\n  var callback = function(message) {\n    msg.myData.push(message);\n  };\n  consumer.subscribe(callback).then(function(){\n    msg.sendToMyChannel = function(message){\n      const messageData = { body: message, user_id: $auth.getPayload().id, chat_room_id: $state.params.id };\n      Message.save(messageData);\n      consumer.send(messageData);\n    };\n    $scope.$on('$destroy', function(){\n      consumer.unsubscribe().then(function(){\n        msg.sendToMyChannel = undefined;\n      });\n    });\n  });\n}\n","angular.module('finalProject')\n  .factory('Message', Message);\n\nMessage.$inject = ['$resource', 'API_URL'];\nfunction Message($resource, API_URL) {\n  return new $resource(`${API_URL}/messages/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('usersIndex', {\n      url: '/users',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('usersShow', {\n      url: '/users/:id',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    })\n    .state('usersEdit', {\n      url: '/users/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    })\n    .state('landing', {\n      url: '/',\n      templateUrl: '/templates/landing.html'\n    })\n    .state('chatrooms', {\n      url: '/chatrooms',\n      templateUrl: '/templates/chatroomsIndex.html',\n      controller: 'ChatroomsIndexController as chatroomsIndex'\n    })\n    .state('chatroomsNew', {\n      url: '/chatrooms/new',\n      templateUrl: '/templates/chatroomsNew.html',\n      controller: 'ChatroomsNewController as chatroomsNew'\n    })\n    .state('chatroomsShow', {\n      url: '/chatrooms/:id',\n      templateUrl: '/templates/chatroomsShow.html',\n      controller: 'ChatroomsShowController as chatroomsShow'\n    });\n\n  $urlRouterProvider.otherwise('/chatrooms');\n}\n","angular.module('finalProject')\n  .controller('StatusController', StatusController);\n\nStatusController.$inject = ['ActionCableSocketWrangler'];\nfunction StatusController(ActionCableSocketWrangler){\n  this.status = ActionCableSocketWrangler;\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}","angular.module('finalProject')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\nUsersIndexController.$inject = ['User', '$auth'];\nfunction UsersIndexController(User, $auth) {\n  const usersIndex = this;\n\n  User.get({ id: $auth.getPayload().id }, (user) => {\n    usersIndex.currentUser = user;\n    usersIndex.all = User.query();\n  });\n\n  function isSelf(user) {\n    return user.id === usersIndex.currentUser.id;\n  }\n  usersIndex.isSelf = isSelf;\n  usersIndex.filter = { username: '' };\n}\n\nUsersShowController.$inject = ['User', '$state', '$auth'];\nfunction UsersShowController(User, $state, $auth) {\n  const usersShow = this;\n\n  function isCurrentUser() {\n    const authPayload = $auth.getPayload();\n    return authPayload && (authPayload.id === Number($state.params.id));\n  }\n\n  usersShow.isCurrentUser = isCurrentUser;\n\n  usersShow.user = User.get($state.params);\n\n  function remove() {\n    usersShow.user.$remove(() => {\n      $auth.logout();\n      $state.go('landing');\n    });\n  }\n  usersShow.remove = remove;\n}\n\nUsersEditController.$inject = ['User', '$state'];\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function submit() {\n    usersEdit.user.$update(() => {\n      $state.go('usersShow', { id: usersEdit.user.id });\n    });\n  }\n  usersEdit.submit = submit;\n}\n"]}